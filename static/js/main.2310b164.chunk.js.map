{"version":3,"sources":["Services/firebase.js","Views/LandingPage.js","Views/LocationQuestion.js","Views/QuestionTemplate.js","Views/Loading.js","Views/ResultsPage.js","SurveyController.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","LandingPage","props","className","onClick","this","startSurvey","type","href","title","Component","LocationQuestion","handleChange","event","setState","target","name","value","state","address","city","stateName","zip","canGoNext","bind","checkValidLocation","currentResponse","getCurrentResponse","length","concat","location","checkFields","saveResponse","goNext","alert","geocoder","window","google","maps","Geocoder","Promise","resolve","reject","geocode","results","status","GeocoderStatus","OK","onChange","id","for","QuestionTemplate","handleCheck","checked","questionText","goBack","Loading","class","ResultsPage","computeResults","resultsDisplay","lastUpdated","i","criteriaDisplay","c","criteriaAvailable","push","criteriaNotAvailable","websiteUrl","phone","distanceAway","App","response","updateResponses","responses","pageIndex","questions","testingCenters","getSurveyQuestions","getTestingCenters","getLastUpdated","dateUpdated","ref","on","snapshot","val","forEach","date","surveyQuestionRef","questionsList","responsesList","surveyQuestion","testingCentersList","testingCenter","free","driveThrough","translator","console","log","tc","criteriaMetCount","criteriaAvailableList","criteriaNotAvailableList","criteriaMet","origin","addresses","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","TravelMode","DRIVING","unitSystem","UnitSystem","IMPERIAL","DistanceMatrixStatus","rows","elements","distanceArr","distance","text","split","mileage","parseFloat","sort","a","b","questionTemplates","question","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","SurveyController","document","getElementById"],"mappings":"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","file":"static/js/main.2310b164.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyAzlS4G0_AilAhMaLg1-Kqq5p6dEqI_2MU\",\n    authDomain: \"info-442-1602963873043.firebaseapp.com\",\n    databaseURL: \"https://info-442-1602963873043.firebaseio.com\",\n    projectId: \"info-442-1602963873043\",\n    storageBucket: \"info-442-1602963873043.appspot.com\",\n    messagingSenderId: \"1017087285302\",\n    appId: \"1:1017087285302:web:0a2d9a875812a2ecffe097\",\n    measurementId: \"G-CDH98XSBFG\"\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const db = firebase.database();","import React, {Component} from 'react';\n\nclass LandingPage extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n      return (\n        <div>\n            <h1>Where2Test</h1>\n            <p className=\"Descr\">Fill out a few questions to find out where the closest COVID-19 testing center is that best fits your needs.</p>\n            <button onClick={this.props.startSurvey} type=\"button\" className=\"Start-btn\">START</button>\n            <footer>\n            <div>Icons made by <a href=\"https://smashicons.com/\" title=\"Smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n            </footer>\n        </div>\n      );\n  }\n}\n\nexport default LandingPage;","import React, {Component} from 'react';\nimport google from 'react';\n\nclass LocationQuestion extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n      city: \"\",\n      stateName: \"\",\n      zip: \"\"\n    };\n    this.canGoNext = this.canGoNext.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.checkValidLocation = this.checkValidLocation.bind(this);\n  }\n\n  componentWillMount() {\n    var currentResponse = this.props.getCurrentResponse();\n    if (currentResponse.length !== null) {\n      this.setState({address: currentResponse.address, city: currentResponse.city, stateName: currentResponse.stateName, zip: currentResponse.zip});\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  async canGoNext() {\n    var address = ''.concat(this.state.address, \", \", this.state.city, \" \", this.state.stateName, \" \", this.state.zip);\n    \n    var location =  {\n      address: this.state.address,\n      city: this.state.city,\n      stateName: this.state.stateName,\n      zip: this.state.zip\n    }\n\n    var fieldsFilledOut = this.checkFields();\n    \n    if (fieldsFilledOut) {\n      var validLocation = await this.checkValidLocation(address);\n      if (validLocation) {\n        this.props.saveResponse(location);\n        this.props.goNext();\n      }\n    } else {\n        alert(\"Fill out all fields\");\n    }\n  }\n\n  checkFields() {\n    const {address, city, stateName, zip } = this.state;\n    var filledOut = (address.length > 0) && (city.length > 0) && (stateName.length > 0) && (zip.length > 0);\n    return filledOut;\n  }\n\n  checkValidLocation(address) {\n    var geocoder = new window.google.maps.Geocoder();\n    return new Promise(function(resolve, reject) {\n      geocoder.geocode({\n        'address': address\n      }, function(results, status) {\n        if (status === window.google.maps.GeocoderStatus.OK && results.length > 0) {\n          resolve(true);\n        } else {\n          reject(false);\n          alert(\"Invalid Address\");\n        }\n      });\n    });\n    return true;\n  }\n\n  render() {\n    return (\n      <div className=\"Question-page\">\n        <div className=\"Question\">\n          <p className=\"Q\">\n            Please enter a location.<span className=\"required\">*</span>\n          </p>\n          <div className=\"Location-form\">\n              <form className=\"Full-address\">\n                  <div className=\"Address-field\">\n                      <input onChange={this.handleChange} type=\"text\" id=\"Address\" name=\"address\" value={ this.state.address }></input>\n                      <label for=\"Address\">Address</label>\n                  </div>\n                  <div className=\"City-field\">\n                      <input onChange={this.handleChange} type=\"text\" id=\"City\" name=\"city\" value={ this.state.city }></input>\n                      <label for=\"City\">City</label>\n                  </div>\n                  <div className=\"State-field\">\n                      <input onChange={this.handleChange} type=\"text\" id=\"State\" name=\"stateName\" value={ this.state.stateName }></input>\n                      <label for=\"State\">State</label>\n                  </div>\n                  <div className=\"Zip-field\">\n                      <input onChange={this.handleChange} type=\"text\" id=\"Zip\" name=\"zip\" value={ this.state.zip }></input>\n                      <label for=\"Zip\">Zip</label>\n                  </div>\n              </form>\n          </div>\n        </div>\n        <div className=\"Nav-Buttons-One\">\n          <button onClick={this.canGoNext} type=\"button\" className=\"Nav-btn\">\n            NEXT\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LocationQuestion;\n","import React, {Component} from 'react';\n\nclass QuestionTemplate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: \"\"\n    };\n    this.handleCheck = this.handleCheck.bind(this);\n    this.canGoNext = this.canGoNext.bind(this);\n  }\n\n  componentWillMount() {\n    var currentResponse = this.props.getCurrentResponse();\n    this.setState({checked: currentResponse});\n  }\n\n  handleCheck = (event) => {\n    this.setState({\n      checked: event.target.value\n    });\n    this.props.saveResponse(event.target.value);\n  }\n\n  canGoNext() {\n    if (this.state.checked !== \"Yes\" && this.state.checked !== \"No\") {\n      alert(\"Please make a selection\");\n    } else {\n      this.props.saveResponse(this.state.checked);\n      this.props.goNext();\n    } \n  }\n\n  render() {\n    return (\n        <div className=\"Question-page\">\n          <div className=\"Question\">\n            <p className=\"Q\">{this.props.questionText}<span className=\"required\">*</span></p>\n            <div className=\"Checkboxes\">\n              <div className=\"CB\">\n                <input\n                  type=\"checkbox\"\n                  id=\"Yes\"\n                  name=\"Yes\"\n                  value=\"Yes\"\n                  className=\"Box\"\n                  checked={this.state.checked === \"Yes\"}\n                  onChange={this.handleCheck}\n                />\n                <label for=\"Yes\">Yes</label>\n              </div>\n              <div className=\"CB\">\n                <input\n                  type=\"checkbox\"\n                  id=\"No\"\n                  name=\"No\"\n                  value=\"No\"\n                  className=\"Box\"\n                  checked={this.state.checked === \"No\"}\n                  onChange={this.handleCheck}\n                />\n                <label for=\"No\">No</label>\n              </div>\n            </div>\n          </div>\n          <div className=\"Nav-Buttons\">\n            <button onClick={this.props.goBack} type=\"button\" className=\"Nav-btn\">\n              BACK\n            </button>\n            <button onClick={this.canGoNext} type=\"button\" className=\"Nav-btn\">\n              NEXT\n            </button>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default QuestionTemplate;","import React, {Component} from 'react';\n\nclass Loading extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"Loading-page\">\n        <p className=\"Error-message\">Please wait a moment while we retrieve your results.</p>\n        <div class=\"loader\"></div>\n      </div>\n    );\n    }\n}\n\n\nexport default Loading;","import { render } from '@testing-library/react';\nimport React, {Component} from 'react';\nimport Loading from './Loading';\n\nclass ResultsPage extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentWillMount() {\n    this.props.computeResults();\n  }\n\n  render() {\n      const results = this.props.results;\n      const lastUpdated = this.props.lastUpdated;\n\n      // get results to display\n      var resultsDisplay = [];\n      for (var i = 0; i < results.length; i++) {\n        var criteriaDisplay = [];\n        for (var c in results[i].criteriaAvailable) {\n          criteriaDisplay.push(\n          <p className=\"Criteria\"><span className=\"Checkmark\">&#10003; </span>{results[i].criteriaAvailable[c]}</p>\n          );\n        }\n        for (var c in results[i].criteriaNotAvailable) {\n          criteriaDisplay.push(\n            <p className=\"Criteria\"><span className=\"x-mark\">&#10007; </span>{results[i].criteriaNotAvailable[c]}</p>\n          );\n        }\n\n        resultsDisplay.push(\n          <div key={i} className=\"Result-section-flexbox\">\n            <div className=\"Single-result-flexbox\">\n                <div className=\"Result-card\">\n                    <p className=\"Testing-center\"><a href={results[i].websiteUrl}>{results[i].name}</a></p>\n                    <p className=\"Testing-center-address\">{results[i].address}</p>\n                    <p className=\"Testing-center-hours\">Open: Mon-Fri</p>\n                    <div className=\"Card-bottom\">\n                        <div>\n                            <p className=\"Testing-phone\">{results[i].phone}</p>\n                        </div>\n                        <div>\n                            <p className=\"Testing-distance\">{results[i].distanceAway + \" mi\"}</p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"Criteria-checklist\">\n                    {criteriaDisplay}\n                </div>\n            </div>\n          </div>\n        );\n      }\n\n      return (\n        this.props.results.length > 0 && this.props.lastUpdated.length > 0 ? <div>\n            <div>\n                <p className=\"Result-intro\">Here are the testing centers you should go to based on your selections:</p>\n                <p className=\"Result-explanation\">They are filtered based on your preferences and ordered based on closest location.</p>\n                <p className=\"Result-explanation last-updated\">Testing center information last updated on: <span className=\"updated-date\">{this.props.lastUpdated[0]}</span></p>\n            </div>\n            <div>\n              {resultsDisplay}\n            </div>\n        </div> : <Loading></Loading>\n      );\n  }\n}\n\nexport default ResultsPage;","import './App.css';\nimport { db } from './Services/firebase';\nimport google from 'react';\nimport React, {Component} from 'react';\nimport LandingPage from './Views/LandingPage';\nimport LocationQuestion from './Views/LocationQuestion';\nimport QuestionTemplate from './Views/QuestionTemplate';\nimport ResultsPage from './Views/ResultsPage';\nimport Loading from './Views/Loading';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        questions: [],\n        responses: [],\n        pageIndex: 0,\n        testingCenters: [],\n        results: [],\n        lastUpdated: []\n    }\n\n    this.getSurveyQuestions = this.getSurveyQuestions.bind(this);\n    this.getTestingCenters = this.getTestingCenters.bind(this);\n    this.getCurrentResponse = this.getCurrentResponse.bind(this);\n    this.startSurvey = this.startSurvey.bind(this);\n    this.goNext = this.goNext.bind(this);\n    this.saveResponse = this.saveResponse.bind(this);\n    this.goBack = this.goBack.bind(this);\n    this.computeResults = this.computeResults.bind(this);\n    this.getLastUpdated = this.getLastUpdated.bind(this);\n  }\n  \n  async componentWillMount() {\n      await this.getSurveyQuestions();\n      await this.getTestingCenters();\n      await this.getLastUpdated();\n  }\n\n  async getLastUpdated() {\n    var dateUpdated = [];\n    var lastUpdatedRef = db.ref(\"lastUpdated\");\n    lastUpdatedRef.on('value', function(snapshot) {\n      var data = snapshot.val();\n      data.forEach(date => {\n        dateUpdated.push(date.lastUpdated);\n      });\n    });\n    this.setState({lastUpdated: dateUpdated});\n  }\n\n async getSurveyQuestions() {\n    var surveyQuestionRef = db.ref(\"surveyQuestions\");\n    var questionsList = [];\n    var responsesList = [];\n    surveyQuestionRef.on('value', function(snapshot) {\n        var data = snapshot.val();\n        data.forEach(surveyQuestion => {\n            questionsList.push(surveyQuestion);\n            responsesList.push(\"No response\");\n        })\n    });   \n    this.setState({questions: questionsList, responses: responsesList});\n  }\n\n  async getTestingCenters() {\n    var testingCentersList = [];\n    var testingSitesRef = db.ref(\"testingSites\");\n    testingSitesRef.on('value', function(snapshot) {\n        var data = snapshot.val();\n        data.forEach(testingCenter => {\n            testingCentersList.push(testingCenter);\n        })\n    });\n    this.setState({testingCenters: testingCentersList});\n  }\n\n  getCurrentResponse() {\n    return this.state.responses[this.state.pageIndex - 1];\n  }\n\n  startSurvey() {\n      this.setState({pageIndex: this.state.pageIndex + 1});\n  }\n\n  goNext() {\n    this.setState({\n        pageIndex: this.state.pageIndex + 1\n    });\n  }\n\n  saveResponse = (response) => {\n      var updateResponses = this.state.responses;\n      updateResponses[this.state.pageIndex - 1] = response;\n      this.setState({\n          responses: updateResponses,\n      });\n  }\n\n  goBack() {\n      this.setState({pageIndex: this.state.pageIndex - 1});\n  }\n\n  async computeResults() {\n      var testingCenters = this.state.testingCenters;\n      var free = this.state.responses[1] === \"Yes\";\n      var driveThrough = this.state.responses[2] === \"Yes\";\n      var translator = this.state.responses[3] === \"Yes\";\n\n      if (testingCenters.length < 1) {\n          console.log(\"Error retrieving testing centers\");\n      }\n\n      testingCenters.forEach(tc =>{\n        var criteriaMetCount = 0;\n        var criteriaAvailableList = [];\n        var criteriaNotAvailableList = [];\n        if ((tc.free=== true)) {\n          criteriaAvailableList.push(\"Free testing available\");\n          if (free === true) {\n            criteriaMetCount++;\n          }\n        } else {\n          criteriaNotAvailableList.push(\"No free testing\");\n        }\n        if (tc.driveThrough === true) {\n          criteriaAvailableList.push(\"Drive through option\");\n          if (driveThrough === true) {\n            criteriaMetCount++;\n          }\n        } else {\n          criteriaNotAvailableList.push(\"No drive through option\");\n        }\n        if (tc.translator === true) {\n          criteriaAvailableList.push(\"Translator available\");\n          if (translator === true) {\n            criteriaMetCount++;\n          }\n        } else {\n          criteriaNotAvailableList.push(\"No translator option\");\n        }\n\n        tc.criteriaMet = criteriaMetCount;\n        tc.criteriaAvailable = criteriaAvailableList;\n        tc.criteriaNotAvailable = criteriaNotAvailableList;\n      });\n\n\n      // get survey address\n      var origin = [];\n      origin.push(''.concat(this.state.responses[0].address, \", \", this.state.responses[0].city, \", \", this.state.responses[0].stateName, \" \", this.state.responses[0].zip));\n\n      // get distance away from specificed location \n      var addresses = [];\n      testingCenters.forEach(tc => {\n          addresses.push(tc.address);\n      });\n\n      var distanceService = new window.google.maps.DistanceMatrixService();\n      distanceService.getDistanceMatrix(\n        {\n          origins: origin,\n          destinations: addresses,\n          travelMode: window.google.maps.TravelMode.DRIVING,\n          unitSystem: window.google.maps.UnitSystem.IMPERIAL \n        },\n        function (response, status) {\n          if (status !== window.google.maps.DistanceMatrixStatus.OK) {\n              alert(\"Service error, please try again later\");\n              console.log(\"Error: \", status);\n          } else {\n            var results = response.rows[0].elements;\n            for (var i = 0; i < results.length; i++) {\n                var element = results[i];\n                var distance = element.distance.text;\n                var distanceArr = distance.split(\" \");\n                var mileage = parseFloat(distanceArr[0]);\n                testingCenters[i].distanceAway = mileage;\n            }\n            // sort by criteria met and then distance\n            testingCenters.sort(function(a, b) {\n              return b.criteriaMet - a.criteriaMet || a.distanceAway - b.distanceAway;\n            });\n            console.log(testingCenters);\n            this.setState({results: testingCenters});\n          }\n        }.bind(this)\n    )\n  }\n\n  render() {\n    const { pageIndex, questions } = this.state;\n    var questionTemplates = [];\n\n    for (var i = 1; i < questions.length; i++) {\n      questionTemplates.push(\n        <QuestionTemplate key={i} goNext={this.goNext} saveResponse={this.saveResponse} goBack={this.goBack} questionText={questions[i].question} getCurrentResponse={this.getCurrentResponse}></QuestionTemplate>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n          {pageIndex === 0 ? <LandingPage startSurvey={this.startSurvey}></LandingPage> : null}\n          {pageIndex === 1 ? <LocationQuestion goNext={this.goNext} saveResponse={this.saveResponse} getCurrentResponse={this.getCurrentResponse}></LocationQuestion> : null}\n          {pageIndex === 2 ? questionTemplates[0] : null}\n          {pageIndex === 3 ? questionTemplates[1] : null}\n          {pageIndex === 4 ? questionTemplates[2] : null}\n          {pageIndex === 5 ? <ResultsPage computeResults={this.computeResults} results={this.state.results} lastUpdated={this.state.lastUpdated}></ResultsPage> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SurveyController from './SurveyController';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SurveyController></SurveyController>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}